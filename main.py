import json
from typing import Final
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ConversationHandler, CallbackQueryHandler, MessageHandler, \
    filters, ContextTypes
import random
from warnings import filterwarnings
from telegram.warnings import PTBUserWarning
from keyboards import main_menu_keyboard
from commands.irregular_verbs import *
from data import *
from tasks import TASK_PICK, START_IRREGULAR_VERBS, IRREGULAR_VERBS, START_TRANSLATE_UA_EN, TRANSLATE_UA_EN, \
    START_IRREGULAR_VERBS_PRACTICE, IRREGULAR_VERBS_PRACTICE, START_PHRASAL_VERBS, PHRASAL_VERBS_CATEGORY, \
    PHRASAL_VERBS, START_STATIVE_DYNAMIC_VERBS, STATIVE_DYNAMIC_VERBS

filterwarnings(action="ignore", message=r".*CallbackQueryHandler",
               category=PTBUserWarning)

TOKEN: Final = '*****'
BOT_USERNAME: Final = '@learn_english_verbs_dev_bot'


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f'–ü—Ä–∏–≤—ñ—Ç, {update.message.chat.first_name}!\n\n'
                                    f'–í—ñ—Ç–∞—î–º–æ —Ç–µ–±–µ —É —á–∞—Ç-–±–æ—Ç—ñ, –∑ —è–∫–∏–º —Ç–∏ –∑–º–æ–∂–µ—à –≤–∏–≤—á–∞—Ç–∏ –¥—ñ—î—Å–ª–æ–≤–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏ ü•≥.\n\n'
                                    f'–•—É—Ç—á—ñ—à –æ–±–∏—Ä–∞–π —â–æ —Å–∞–º–µ —Ç–∏ —Ö–æ—á–µ—à –ø—Ä–∞–∫—Ç–∏–∫—É–≤–∞—Ç–∏ –≤ –º–µ–Ω—é –Ω–∏–∂—á–µ —ñ —Ö–æ–¥—ñ–º–æ –≤—á–∏—Ç–∏—Å—è!', reply_markup=InlineKeyboardMarkup(main_menu_keyboard))
    return TASK_PICK


async def to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action = query.data

    if action == 'to_main_menu':
        await context.bot.send_message(chat_id=update.callback_query.message.chat_id,
                                       text=f'<b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>\n\n'
                                            f'–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö –¥—ñ—î—Å–ª—ñ–≤.\n\n'
                                            f'–û–±–∏—Ä–∞–π, —â–æ —Ö–æ—á–µ—à –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–≤–∞—Ç–∏: ',
                                       parse_mode='HTML', reply_markup=InlineKeyboardMarkup(main_menu_keyboard))
        return TASK_PICK


async def task_picker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    task = query.data

    keyboard = [
        [InlineKeyboardButton('–ü–æ—á–∞—Ç–∏', callback_data='start')],
        [InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')]
    ]

    if task == 'irregular_verbs':
        await context.bot.send_message(chat_id=update.callback_query.message.chat_id,
                                       text=f'<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥—ñ—î—Å–ª–æ–≤–∞</b>\n\n'
                                            f'–£ —Ü—å–æ–º—É –∑–∞–≤–¥–∞–Ω–Ω—ñ —Ç–∏ –º–æ–∂–µ—à –ø—Ä–∏–≥–∞–¥–∞—Ç–∏ —Ñ–æ—Ä–º–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –¥—ñ—î—Å–ª—ñ–≤.\n\n'
                                            f'–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–µ–Ω—ñ –ø–æ—á–∞—Ç–∫–æ–≤—É —Ñ–æ—Ä–º—É, –∞ —è –≤–∫–∞–∂—É –≤—Å—ñ —ñ–Ω—à—ñ!',
                                       parse_mode='HTML', reply_markup=InlineKeyboardMarkup(keyboard))
        return START_IRREGULAR_VERBS
    elif task == 'practice_irregular_verbs':
        await context.bot.send_message(chat_id=update.callback_query.message.chat_id,
                                       text=f'<b>–ü—Ä–∞–∫—Ç–∏–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –¥—ñ—î—Å–ª—ñ–≤</b>\n\n'
                                            f'–¢—É—Ç —Ç–∏ –∑–º–æ–∂–µ—à –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–≤–æ—ó –∑–Ω–∞–Ω–Ω—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –¥—ñ—î—Å–ª—ñ–≤.\n\n'
                                            f'–Ø –Ω–∞–¥–∞–≤–∞—Ç–∏–º—É –æ–¥–Ω—É —ñ–∑ —Ñ–æ—Ä–º —ñ –≤–∫–∞–∂—É, —è–∫—É —Ñ–æ—Ä–º—É —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ –º–µ–Ω—ñ —É –≤—ñ–¥–ø—Ä–æ–≤—ñ–¥—å.\n\n'
                                            f'–Ø–∫—â–æ —Ç–∏ –Ω–µ –º–æ–∂–µ—à –ø—Ä–∏–≥–∞–¥–∞—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω—É —Ñ–æ—Ä–º—É, –ø—Ä–æ—Å—Ç–æ –ø–æ–ø—Ä–æ—Å–∏ —É –º–µ–Ω–µ –¥–æ–ø–æ–º–æ–≥–∏ —ñ —è –∑–∞–ª—é–±–∫–∏ —Ç–æ–±—ñ –ø—ñ–¥–∫–∞–∂—É üòä',
                                       parse_mode='HTML', reply_markup=InlineKeyboardMarkup(keyboard))
        return START_IRREGULAR_VERBS_PRACTICE
    elif task == 'translate_verbs_ua_en':
        await context.bot.send_message(chat_id=update.callback_query.message.chat_id,
                                       text=f'<b>–ü–µ—Ä–µ–∫–ª–∞–¥ (UA ‚Üí EN)</b>\n\n'
                                            f'–£ —Ü—å–æ–º—É –∑–∞–≤–¥–∞–Ω–Ω—ñ —è –ø—Ä–æ–ø–æ–Ω—É—é —Ç–æ–±—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—Ç–∏ —Å–ª–æ–≤–∞ –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é.\n\n'
                                            f'–£ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—ñ —è –≤–∫–∞–∂—É —Å–ª–æ–≤–æ, –∞ —Ç–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥.\n\n'
                                            f'–Ø–∫—â–æ —Ç–∏ –Ω–µ –∑–Ω–∞—î—à –ø–µ–≤–Ω–µ –¥—ñ—î—Å–ª–æ–≤–æ, —î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–æ–ø—Ä–æ—Å–∏—Ç–∏ –º–æ—î—ó –¥–æ–ø–æ–º–æ–≥–∏.\n\n'
                                            f'–¢–æ —â–æ, –ø–æ—ó—Ö–∞–ª–∏? üèÉ‚Äç‚ôÇÔ∏è ',
                                       parse_mode='HTML', reply_markup=InlineKeyboardMarkup(keyboard))
        return START_TRANSLATE_UA_EN
    elif task == 'practice_phrasal_verbs':
        await context.bot.send_message(chat_id=update.callback_query.message.chat_id,
                                       text=f'<b>–§—Ä–∞–∑–æ–≤—ñ –¥—ñ—î—Å–ª–æ–≤–∞</b>\n\n'
                                            f'–î–∞–≤–∞–π –ø–æ–≤—Ç–æ—Ä–∏–º–æ —Ñ—Ä–∞–∑–æ–≤—ñ –¥—ñ—î—Å–ª–æ–≤–∞.\n\n'
                                            f'–Ø –Ω–∞–¥–∞–≤–∞—Ç–∏–º—É —á–∞—Å—Ç–∏–Ω—É —Ñ—Ä–∞–∑–æ–≤–æ–≥–æ –¥—ñ—î—Å–ª–æ–≤–∞ —ñ –π–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è. –ó–∞–≤–¥–∞–Ω–Ω—è - –ø—Ä–∞–≤–∏–ª—å–Ω–æ –π–æ–≥–æ –¥–æ–ø–æ–≤–Ω–∏—Ç–∏.\n\n'
                                            f'–Ø–∫—â–æ —Ç–∏ –Ω–µ –∑–Ω–∞—î—à –ø—Ä–∞–≤–∏–ª—å–Ω—É —Ñ–æ—Ä–º—É, —è –∑–∞–ª—é–±–∫–∏ —Ç–æ–±—ñ –¥–æ–ø–æ–º–æ–∂—É :)',
                                       parse_mode='HTML', reply_markup=InlineKeyboardMarkup(keyboard))
        return START_PHRASAL_VERBS
    elif task == 'practice_stative_dynamic':
        await context.bot.send_message(chat_id=update.callback_query.message.chat_id,
                                       text=f'<b>–°—Ç–∞—Ç–∏—á–Ω—ñ —Ç–∞ –¥–∏–Ω–∞–º—ñ—á–Ω—ñ –¥—ñ—î—Å—Å–ª–æ–≤–∞</b>\n\n'
                                            f'–î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥ —ñ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è'
                                            f'—Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ç–∞ –¥–∏–Ω–∞–º—ñ—á–Ω–∏—Ö –¥—ñ—î—Å–ª—ñ–≤.\n\n'
                                            f'–Ø –Ω–∞–¥–∞–≤–∞—Ç–∏–º—É —Ä–µ—á–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é. –ó–∞–≤–¥–∞–Ω–Ω—è - –ø—Ä–∞–≤–∏–ª—å–Ω–æ –π–æ–≥–æ –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏.\n\n'
                                            f'–Ø–∫—â–æ —Ç–∏ –Ω–µ –∑–Ω–∞—î—à –ø—Ä–∞–≤–∏–ª—å–Ω—É —Ñ–æ—Ä–º—É, —è –∑–∞–ª—é–±–∫–∏ —Ç–æ–±—ñ –¥–æ–ø–æ–º–æ–∂—É :)',
                                       parse_mode='HTML', reply_markup=InlineKeyboardMarkup(
                                           [
                                               [InlineKeyboardButton(
                                                   '–ü–æ—á–∞—Ç–∏', callback_data='start')],
                                               [InlineKeyboardButton(
                                                   '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø—Ä–∞–≤–∏–ª–æ', callback_data='explanation')],
                                               [InlineKeyboardButton(
                                                   '–ù–∞–∑–∞–¥', callback_data='back')]
                                           ]
                                       ))
        return START_STATIVE_DYNAMIC_VERBS
    else:
        print('unknown_task')


async def start_irregular_verbs_practice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action = query.data

    if action == 'start':
        verb = random.choice(list(irregular_verbs.keys()))
        verb_forms = irregular_verbs[verb].split(',')
        target_form = random.choice([1, 2])

        context.user_data['ir_practice_verb'] = verb
        context.user_data['ir_practice_form'] = target_form
        context.user_data['ir_practice_form_verb'] = verb_forms[target_form]

        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton('–ù–µ –∑–Ω–∞—é', callback_data='dont_know')],
            [InlineKeyboardButton('–ó–∞–∫—ñ–Ω—á–∏—Ç–∏', callback_data='to_main_menu')]
        ])

        await context.bot.send_message(chat_id=update.callback_query.message.chat_id,
                                       text=f'–í–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É —Ñ–æ—Ä–º—É:\n\n'
                                            f'–î—ñ—î—Å–ª–æ–≤–æ: <b>{verb}</b>\n'
                                            f'–§–æ—Ä–º–∞: <b>{"Past Simple" if target_form == 1 else "Past Participle"}</b>',
                                       parse_mode='HTML',
                                       reply_markup=reply_markup)

        return IRREGULAR_VERBS_PRACTICE
    elif action == 'back':
        await context.bot.send_message(chat_id=update.callback_query.message.chat_id,
                                       text=f'<b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>\n\n'
                                            f'–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –∑ –≤–∏–≤—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö –¥—ñ—î—Å–ª—ñ–≤.\n\n'
                                            f'–û–±–∏—Ä–∞–π, —â–æ —Ö–æ—á–µ—à –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–≤–∞—Ç–∏: ',
                                       parse_mode='HTML', reply_markup=InlineKeyboardMarkup(main_menu_keyboard))
        return TASK_PICK


async def irregular_verbs_practice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text: str = update.message.text.lower().strip()
    prev_verb: str = context.user_data['ir_practice_verb']
    prev_target_form: str = context.user_data['ir_practice_form']
    prev_target_form_value: str = context.user_data['ir_practice_form_verb']

    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton('–ù–µ –∑–Ω–∞—é', callback_data='dont_know')],
        [InlineKeyboardButton('–ó–∞–∫—ñ–Ω—á–∏—Ç–∏', callback_data='to_main_menu')]
    ])

    if text == prev_target_form_value:
        next_verbs_options = list(
            filter(lambda v: v != prev_verb, list(irregular_verbs.keys())))
        verb = random.choice(next_verbs_options)
        verb_forms = irregular_verbs[verb].split(',')
        target_form = random.choice([1, 2])

        context.user_data['ir_practice_verb'] = verb
        context.user_data['ir_practice_form'] = target_form
        context.user_data['ir_practice_form_verb'] = verb_forms[target_form]

        await update.message.reply_text(f'‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n'
                                        f'<b>{"Past Simple" if prev_target_form == 1 else "Past Participle"}</b> '
                                        f'–¥—ñ—î—Å–ª–æ–≤–∞ <b>{prev_verb}</b> - <b>{prev_target_form_value}</b>\n\n'
                                        f'–ù–∞—Å—Ç—É–ø–Ω–µ:\n\n'
                                        f'–î—ñ—î—Å–ª–æ–≤–æ: <b>{verb}</b>\n'
                                        f'–§–æ—Ä–º–∞: <b>{"Past Simple" if target_form == 1 else "Past Participle"}</b>',
                                        parse_mode='HTML',
                                        reply_markup=reply_markup)
    else:
        await update.message.reply_text(f'‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑',
                                        parse_mode='HTML',
                                        reply_markup=reply_markup)

    return IRREGULAR_VERBS_PRACTICE


async def irregular_verbs_practice_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action = query.data
    prev_verb: str = context.user_data['ir_practice_verb']
    prev_target_form: str = context.user_data['ir_practice_form']
    prev_target_form_value: str = context.user_data['ir_practice_form_verb']

    if action == 'dont_know':
        next_verbs_options = list(
            filter(lambda v: v != prev_verb, list(irregular_verbs.keys())))
        verb = random.choice(next_verbs_options)
        verb_forms = irregular_verbs[verb].split(',')
        target_form = random.choice([1, 2])

        context.user_data['ir_practice_verb'] = verb
        context.user_data['ir_practice_form'] = target_form
        context.user_data['ir_practice_form_verb'] = verb_forms[target_form]

        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton('–ù–µ –∑–Ω–∞—é', callback_data='dont_know')],
            [InlineKeyboardButton('–ó–∞–∫—ñ–Ω—á–∏—Ç–∏', callback_data='to_main_menu')]
        ])

        await context.bot.send_message(chat_id=update.callback_query.message.chat_id,
                                       text=f'üëå –ù—ñ—á–æ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ!\n\n'
                                       f'<b>{"Past Simple" if prev_target_form == 1 else "Past Participle"}</b> '
                                       f'–¥—ñ—î—Å–ª–æ–≤–∞ <b>{prev_verb}</b> - <b>{prev_target_form_value}</b>\n\n'
                                       f'–ù–∞—Å—Ç—É–ø–Ω–µ:\n\n'
                                       f'–î—ñ—î—Å–ª–æ–≤–æ: <b>{verb}</b>\n'
                                       f'–§–æ—Ä–º–∞: <b>{"Past Simple" if target_form == 1 else "Past Participle"}</b>',
                                       parse_mode='HTML',
                                       reply_markup=reply_markup)

        return IRREGULAR_VERBS_PRACTICE
    elif action == 'to_main_menu':
        await context.bot.send_message(chat_id=update.callback_query.message.chat_id,
                                       text=f'<b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>\n\n'
                                            f'–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –∑ –≤–∏–≤—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö –¥—ñ—î—Å–ª—ñ–≤.\n\n'
                                            f'–û–±–∏—Ä–∞–π, —â–æ —Ö–æ—á–µ—à –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–≤–∞—Ç–∏: ',
                                       parse_mode='HTML', reply_markup=InlineKeyboardMarkup(main_menu_keyboard))
        return TASK_PICK


async def start_verbs_translate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print('start_verbs_translate_command')
    query = update.callback_query
    await query.answer()
    action = query.data

    if action == 'start':
        verb_to_translate = random.choice(list(verbs_translate.keys()))
        context.user_data['verb_to_translate'] = verb_to_translate

        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton('–ù–µ –∑–Ω–∞—é', callback_data='dont_know')],
            [InlineKeyboardButton('–ó–∞–∫—ñ–Ω—á–∏—Ç–∏', callback_data='to_main_menu')]
        ])

        await context.bot.send_message(chat_id=update.callback_query.message.chat_id,
                                       text=f'–ü–µ—Ä–µ–∫–ª–∞–¥–∏ - {verb_to_translate}',
                                       parse_mode='HTML', reply_markup=reply_markup)

        return TRANSLATE_UA_EN
    elif action == 'back':
        await context.bot.send_message(chat_id=update.callback_query.message.chat_id,
                                       text=f'<b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>\n\n'
                                            f'–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –∑ –≤–∏–≤—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö –¥—ñ—î—Å–ª—ñ–≤.\n\n'
                                            f'–û–±–∏—Ä–∞–π, —â–æ —Ö–æ—á–µ—à –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–≤–∞—Ç–∏: ',
                                       parse_mode='HTML', reply_markup=InlineKeyboardMarkup(main_menu_keyboard))
        return TASK_PICK


async def verb_translate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text: str = update.message.text.lower().strip()
    target: str = verbs_translate[context.user_data['verb_to_translate']]

    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton('–ù–µ –∑–Ω–∞—é', callback_data='dont_know')],
        [InlineKeyboardButton('–ó–∞–∫—ñ–Ω—á–∏—Ç–∏', callback_data='to_main_menu')]
    ])

    if text == target:
        next_verbs_options = list(
            filter(lambda v: v != target, list(verbs_translate.keys())))
        verb_to_translate = random.choice(next_verbs_options)
        context.user_data['verb_to_translate'] = verb_to_translate
        await update.message.reply_text(f'‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n'
                                        f'–ù–∞—Å—Ç—É–ø–Ω–µ —Å–ª–æ–≤–æ:\n\n'
                                        f'<b>{verb_to_translate}</b>',
                                        parse_mode='HTML',
                                        reply_markup=reply_markup)
    else:
        await update.message.reply_text(f'‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑',
                                        parse_mode='HTML',
                                        reply_markup=reply_markup)

    return TRANSLATE_UA_EN


async def verb_translate_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action = query.data

    if action == 'dont_know':
        verb = context.user_data['verb_to_translate']
        target: str = verbs_translate[verb]

        next_verbs_options = list(
            filter(lambda v: v != target, list(verbs_translate.keys())))
        verb_to_translate = random.choice(next_verbs_options)
        context.user_data['verb_to_translate'] = verb_to_translate
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton('–ù–µ –∑–Ω–∞—é', callback_data='dont_know')],
            [InlineKeyboardButton('–ó–∞–∫—ñ–Ω—á–∏—Ç–∏', callback_data='to_main_menu')]
        ])

        await context.bot.send_message(chat_id=update.callback_query.message.chat_id,
                                       text=f'üëå –ù—ñ—á–æ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ!\n\n'
                                            f'{verb} - <b>{target}</b>.\n\n–ù–∞—Å—Ç—É–ø–Ω–µ —Å–ª–æ–≤–æ - {verb_to_translate}',
                                       parse_mode='HTML',
                                       reply_markup=reply_markup)

        return TRANSLATE_UA_EN
    elif action == 'to_main_menu':
        await context.bot.send_message(chat_id=update.callback_query.message.chat_id,
                                       text=f'<b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>\n\n'
                                            f'–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –∑ –≤–∏–≤—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö –¥—ñ—î—Å–ª—ñ–≤.\n\n'
                                            f'–û–±–∏—Ä–∞–π, —â–æ —Ö–æ—á–µ—à –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–≤–∞—Ç–∏: ',
                                       parse_mode='HTML', reply_markup=InlineKeyboardMarkup(main_menu_keyboard))
        return TASK_PICK


async def start_phrasal_verbs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print('start_phrasal_verbs')
    query = update.callback_query
    await query.answer()
    action = query.data

    print(action)

    if action == 'start':
        await context.bot.send_message(chat_id=update.callback_query.message.chat_id,
                                       text=f'–ü—Ä–∞–∫—Ç–∏–∫–∞ —Ñ—Ä–∞–∑–æ–≤–∏—Ö –¥—ñ—î—Å–ª—ñ–≤.\n\n'
                                            f'–ë—É–¥—å-–ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:',
                                       parse_mode='HTML', reply_markup=InlineKeyboardMarkup(
                                           [
                                               [InlineKeyboardButton(
                                                   '–î–æ–≤—ñ–ª—å–Ω–∞', callback_data='any')],
                                               [InlineKeyboardButton(
                                                   'TAKE', callback_data='take')],
                                               [InlineKeyboardButton(
                                                   'GET', callback_data='get')],
                                               [InlineKeyboardButton(
                                                   'LOOK', callback_data='look')],
                                           ]
                                       ))

        return PHRASAL_VERBS_CATEGORY
    elif action == 'back':
        await context.bot.send_message(chat_id=update.callback_query.message.chat_id,
                                       text=f'<b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>\n\n'
                                            f'–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –∑ –≤–∏–≤—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö –¥—ñ—î—Å–ª—ñ–≤.\n\n'
                                            f'–û–±–∏—Ä–∞–π, —â–æ —Ö–æ—á–µ—à –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–≤–∞—Ç–∏: ',
                                       parse_mode='HTML', reply_markup=InlineKeyboardMarkup(main_menu_keyboard))
        return TASK_PICK


async def phrasal_verbs_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print('phrasal_verbs_category')
    query = update.callback_query
    await query.answer()
    category = query.data
    if category == 'any':
        phrasal_verbs_to_pick = phrasal_verbs
    else:
        phrasal_verbs_to_pick = list(
            filter(lambda v: v['category'] == category, phrasal_verbs))

    context.user_data['phrasal_verbs_category'] = category
    target_phrasal_verb = random.choice(phrasal_verbs_to_pick)
    context.user_data['target_phrasal_verb'] = json.dumps(target_phrasal_verb)

    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton('–ù–µ –∑–Ω–∞—é', callback_data='dont_know')],
        [InlineKeyboardButton('–ó–∞–∫—ñ–Ω—á–∏—Ç–∏', callback_data='to_main_menu')]
    ])

    await context.bot.send_message(chat_id=update.callback_query.message.chat_id,
                                   text=f'–ü–æ—á–∏–Ω–∞—î–º–æ!\n\n'
                                        f'–ó–Ω–∞—á–µ–Ω–Ω—è: <b>{target_phrasal_verb["translation"]}</b>\n\n'
                                        f'<b>{target_phrasal_verb["practice"]}</b>',
                                   parse_mode='HTML',
                                   reply_markup=reply_markup)

    return PHRASAL_VERBS


async def phrasal_verb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print('phrasal_verb')
    text: str = update.message.text.lower().strip()
    target = json.loads(context.user_data['target_phrasal_verb'])
    users_phrasal_verb = target['practice'].replace("___", text)

    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton('–ù–µ –∑–Ω–∞—é', callback_data='dont_know')],
        [InlineKeyboardButton('–ó–∞–∫—ñ–Ω—á–∏—Ç–∏', callback_data='to_main_menu')]
    ])

    if users_phrasal_verb == target["verb"]:

        category = context.user_data['phrasal_verbs_category']

        if category == 'any':
            phrasal_verbs_to_pick = phrasal_verbs
        else:
            phrasal_verbs_to_pick = list(filter(
                lambda v: v['category'] == category and v['verb'] != target['verb'], phrasal_verbs))

        target_phrasal_verb = random.choice(phrasal_verbs_to_pick)
        context.user_data['target_phrasal_verb'] = json.dumps(
            target_phrasal_verb)

        await update.message.reply_text(f'‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n'
                                        f'–ù–∞—Å—Ç—É–ø–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è: <b>{target_phrasal_verb["translation"]}</b>\n\n'
                                        f'<b>{target_phrasal_verb["practice"]}</b>',
                                        parse_mode='HTML',
                                        reply_markup=reply_markup)
    else:
        await update.message.reply_text(f'‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑',
                                        parse_mode='HTML',
                                        reply_markup=reply_markup)

    return PHRASAL_VERBS


async def phrasal_verbs_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action = query.data
    old_phrasal_verb = json.loads(context.user_data['target_phrasal_verb'])

    if action == 'dont_know':
        category = context.user_data['phrasal_verbs_category']

        if category == 'any':
            phrasal_verbs_to_pick = phrasal_verbs
        else:
            phrasal_verbs_to_pick = list(filter(
                lambda v: v['category'] == category and v['verb'] != old_phrasal_verb['verb'], phrasal_verbs))

        target_phrasal_verb = random.choice(phrasal_verbs_to_pick)
        context.user_data['target_phrasal_verb'] = json.dumps(
            target_phrasal_verb)

        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton('–ù–µ –∑–Ω–∞—é', callback_data='dont_know')],
            [InlineKeyboardButton('–ó–∞–∫—ñ–Ω—á–∏—Ç–∏', callback_data='to_main_menu')]
        ])

        await context.bot.send_message(chat_id=update.callback_query.message.chat_id,
                                       text=f'üëå –ù—ñ—á–æ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ!\n\n–ü—Ä–∞–≤–∏–ª—å–Ω–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:\n\n'
                                       f'<b>{old_phrasal_verb["verb"]}</b> ({old_phrasal_verb["translation"]})\n\n'
                                       f'–ù–∞—Å—Ç—É–ø–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è: <b>{target_phrasal_verb["translation"]}</b>\n\n'
                                       f'<b>{target_phrasal_verb["practice"]}</b>',
                                       parse_mode='HTML',
                                       reply_markup=reply_markup)

        return PHRASAL_VERBS
    elif action == 'to_main_menu':
        await context.bot.send_message(chat_id=update.callback_query.message.chat_id,
                                       text=f'<b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>\n\n'
                                            f'–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –∑ –≤–∏–≤—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö –¥—ñ—î—Å–ª—ñ–≤.\n\n'
                                            f'–û–±–∏—Ä–∞–π, —â–æ —Ö–æ—á–µ—à –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–≤–∞—Ç–∏: ',
                                       parse_mode='HTML', reply_markup=InlineKeyboardMarkup(main_menu_keyboard))
        return TASK_PICK


async def unknown_message_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.callback_query.message.chat_id,
                                   text=f'üôÜ‚Äç –£–ø—Å... –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ \n\n'
                                   f'–î–∞–≤–∞–π –ø–æ—á–Ω–µ–º–æ —Å–ø–æ—á–∞—Ç–∫—É.\n\n–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /start , —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è –∑ –±–æ—Ç–æ–º',
                                   parse_mode='HTML')


async def start_stative_dynamic_verbs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print('start_stative_dynamic_verbs')
    query = update.callback_query
    await query.answer()
    action = query.data

    if action == 'start':

        target_stative_dynamic = random.choice(stative_dynamic_verbs)
        context.user_data['target_stative_dynamic_task'] = json.dumps(
            target_stative_dynamic)

        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton('–ù–µ –∑–Ω–∞—é', callback_data='dont_know')],
            [InlineKeyboardButton('–ó–∞–∫—ñ–Ω—á–∏—Ç–∏', callback_data='to_main_menu')]
        ])

        await context.bot.send_message(chat_id=update.callback_query.message.chat_id,
                                       text=f'<b>–ü–æ—è—Å–Ω–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è: </b> \n\n'
                                            f'–í –æ–¥–Ω—ñ–π —Å–∏—Ç—É–∞—Ü—ñ—ó (–ø—Ä–∏–∫–ª–∞–¥—ñ) –¥—ñ—î—Å–ª–æ–≤–æ –±—É–¥–µ –≤–∂–∏—Ç–æ –¥–≤—ñ—á—ñ: —è–∫ stative '
                                            f'—Ç–∞ —è–∫ dynamic verb. \n'
                                            f'–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è: –≤—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ—á–µ–Ω–Ω—è, –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —è–∫–µ –¥—ñ—î—Å–ª–æ–≤–æ '
                                            f'–ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∂–∏—Ç–∏ stative –∞–±–æ dynamic —Ç–∞ –∑–∞–ø–æ–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ–ø—É—Å–∫–∏. –£—Å–ø—ñ—Ö—ñ–≤! \n\n\n'
                                            f'<b>–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Ä–µ—á–µ–Ω–Ω—è:</b>\n'
                                            f'{target_stative_dynamic["translation"]}\n\n'
                                            f'<b>{target_stative_dynamic["task"]} </b>\n\n'
                                            f'<em>–ù–∞–ø–∏—à–∏ –ª–∏—à–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –∫–æ–º—É</em>',
                                       parse_mode='HTML', reply_markup=reply_markup)

        return STATIVE_DYNAMIC_VERBS
    elif action == 'explanation':
        await context.bot.send_message(chat_id=update.callback_query.message.chat_id,
                                       text=f'<b>–°—Ç–∞—Ç–∏—á–Ω—ñ (stative) —ñ –î–∏–Ω–∞–º—ñ—á–Ω—ñ (dynamic) –¥—ñ—î—Å–ª–æ–≤–∞</b>\n\n'
                                            f'–°—Ç–∞—Ç–∏—á–Ω—ñ —Ç–∞ –¥–∏–Ω–∞–º—ñ—á–Ω—ñ –¥—ñ—î—Å–ª–æ–≤–∞ ‚Äì —Ü–µ –æ–¥–Ω–∞–∫–æ–≤—ñ –¥—ñ—î—Å–ª–æ–≤–∞, '
                                            f'–∞–ª–µ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É  —ó—Ö –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∞ —Ñ–æ—Ä–º–∏ –∑–º—ñ–Ω—é—é—Ç—å—Å—è. \n\n'
                                            f'–î–∏–Ω–∞–º—ñ—á–Ω—ñ (–∞–∫—Ç–∏–≤–Ω—ñ) ‚Äì –¥—ñ—î—Å–ª–æ–≤–∞, —è–∫—ñ –≤–∏—Ä–∞–∂–∞—é—Ç—å –∞–∫—Ç–∏–≤–Ω—É –¥—ñ—é, '
                                            f'—è–∫–∞ –º–æ–∂–µ —Ç—Ä–∏–≤–∞—Ç–∏ –ø–µ–≤–Ω–∏–π –ø—Ä–æ–º—ñ–∂–æ–∫ —á–∞—Å—É —Ç–∞ –∑–∞ —Ü—ñ—î—é –¥—ñ—î—é –º–æ–∂–Ω–∞ '
                                            f'—Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—Ç–∏ –∞–±–æ –∂ –≤—ñ–∑—É–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —ó—ó. \n\n'
                                            f'–°—Ç–∞—Ç–∏—á–Ω—ñ (–ø–∞—Å–∏–≤–Ω—ñ)  ‚Äì –¥—ñ—î—Å–ª–æ–≤–∞, —è–∫—ñ –≤–∫–∞–∑—É—é—Ç—å –Ω–∞ –ø–µ–≤–Ω–∏–π —Å—Ç–∞–Ω, '
                                            f'–º–µ–Ω—Ç–∞–ª—å–Ω—ñ –ø—Ä–æ—Ü–µ—Å–∏ –∞–±–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ –¥—ñ—ó, –∑–∞ —è–∫–∏–º–∏ –º–∏ –Ω–µ –º–æ–∂–µ–º–æ '
                                            f'—Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—Ç–∏ –Ω–∞–æ—á–Ω–æ. \n\n'
                                            f'–°—Ç–∞—Ç–∏—á–Ω—ñ –¥—ñ—î—Å–ª–æ–≤–∞ –∑–∞–∑–≤–∏—á–∞–π <b>–Ω–µ</b> –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö —á–∞—Å—ñ–≤ '
                                            f'Continuous. –ó–¥–µ–±—ñ–ª—å—à–æ–≥–æ –≤–æ–Ω–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —É <b>Simple</b> '
                                            f'—Ç–∞ <b>Perfect Tenses</b>.\n\n'
                                            f'–î–∏–Ω–∞–º—ñ—á–Ω—ñ –¥—ñ—î—Å–ª–æ–≤–∞ –º–æ–∂—É—Ç—å –≤–∂–∏–≤–∞—Ç–∏—Å—è —É –≤—Å—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö —á–∞—Å—ñ–≤: '
                                            f'<b>Simple, Continuous, Perfect, Perfect Continuous</b> \n\n'
                                            f'–ü—Ä–æ—Ç–µ, —ñ—Å–Ω—É—é—Ç—å –≤–∏–∫–ª—é—á–µ–Ω–Ω—è. –í–∞–∂–ª–∏–≤–æ –Ω–∞–≤—á–∏—Ç–∏—Å—è —Ä–æ–∑—Ä—ñ–∑–Ω—è—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç, '
                                            f'—É —è–∫–æ–º—É –≤–∂–∏–≤–∞—î—Ç—å—Å—è –¥—ñ—î—Å–ª–æ–≤–æ. –í—ñ–¥ —Ü—å–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —ñ –±—É–¥–µ –∑–∞–ª–µ–∂–∞—Ç–∏ —Ñ–æ—Ä–º–∞ '
                                            f'—Ç–∞ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ–≤–Ω–æ–≥–æ –¥—ñ—î—Å–ª–æ–≤–∞. \n\n'
                                            f'–ù–∞–ø—Ä–∏–∫–ª–∞–¥: \n\n'
                                            f'<em>I <b>think</b> that it is a good idea.</em> ‚Äì —è –¥—É–º–∞—é, –≤ –∑–∞–≥–∞–ª—å–Ω–æ–º—É '
                                            f'–∑–Ω–∞—á–µ–Ω–Ω—ñ —Ü—å–æ–≥–æ —Å–ª–æ–≤–∞. \n '
                                            f'<em>I <b>am thinking</b> about you.</em> ‚Äì ¬´—è –¥—É–º–∞—é¬ª –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑, '
                                            f'—Ü—è –¥—ñ—è –∑–∞—Ä–∞–∑ —É –ø—Ä–æ–≥—Ä–µ—Å—ñ. –•–æ—á–∞ –∑–∞ –ø—Ä–∞–≤–∏–ª–æ–º, –¥—ñ—î—Å–ª–æ–≤–æ <b>think</b> '
                                            f'—î —Å—Ç–∞—Ç–∏—á–Ω–∏–º –¥—ñ—î—Å–ª–æ–≤–æ–º, –æ—Å–∫—ñ–ª—å–∫–∏ –º–∏ –Ω–µ –±–∞—á–∏–º–æ, –Ω–µ –º–æ–∂–µ–º–æ —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—Ç–∏ —è–∫ '
                                            f'–ª—é–¥–∏–Ω–∞ –¥—É–º–∞—î. –£ —Ü—å–æ–º—É –∂ –≤–∏–ø–∞–¥–∫—É, –¥—ñ—î—Å–ª–æ–≤–æ <b>think</b> –æ–∑–Ω–∞—á–∞—î '
                                            f'–¥–∏–Ω–∞–º—ñ—á–Ω—É –¥—ñ—é. \n\n'
                                            f'<em>I <b>am tasting</b> this cake. </em> ‚Äì –Ø —Å–º–∞–∫—É—é, –∫—É—à—Ç—É—é —Ü–µ–π –ø–∏—Ä—ñ–≥ '
                                            f'–ø—Ä—è–º–æ –∑–∞—Ä–∞–∑. –î–∏–Ω–∞–º—ñ—á–Ω–∞ –¥—ñ—è, –¥—ñ—è –≤ –ø—Ä–æ–≥—Ä–µ—Å—ñ ‚Äì –º–∏ –º–æ–∂–µ–º–æ —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—Ç–∏ '
                                            f'—è–∫ —Ö—Ç–æ—Å—å –∫—É—à—Ç—É—î –ø–∏—Ä—ñ–≥.\n'
                                            f'<em>This cake <b>tastes</b> well.</em> ‚Äì –¶–µ–π –ø–∏—Ä—ñ–≥ —Å–º–∞–∫—É—î –¥–æ–±—Ä–µ, '
                                            f'–≤—ñ–Ω —Å–º–∞—á–Ω–∏–π –Ω–∞ —Å–º–∞–∫. –°—Ç–∞—Ç–∏—á–Ω–∞ –¥—ñ—è, —è–∫–∞ –Ω–µ –º–æ–∂–µ —Ç—Ä–∏–≤–∞—Ç–∏, –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ '
                                            f'–≤—ñ–∑—É–∞–ª—ñ–∑–æ–≤–∞–Ω–æ—é. \n\n'
                                            f'–î–ª—è —Ç–æ–≥–æ, —â–æ–± —Ç–∏ –Ω–∞–≤—á–∏–≤—Å—è —Ä–æ–∑—Ä—ñ–∑–Ω—è—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–∞ –≤–∂–∏–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É '
                                            f'—Ñ–æ—Ä–º—É –¥—ñ—î—Å–ª–æ–≤–∞, —è –ø—ñ–¥–≥–æ—Ç—É–≤–∞–≤ –¥–ª—è —Ç–µ–±–µ –≤–ø—Ä–∞–≤–∏. –ù–∞—Ç–∏—Å–Ω–∏ "–ø–æ—á–∞—Ç–∏ –≤–ø—Ä–∞–≤–∏", —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –≤–ø—Ä–∞–≤–∏ –Ω–∞ '
                                            f'<b>stative</b> —Ç–∞ <b>dynamic verbs.</b> –£—Å–ø—ñ—Ö—ñ–≤ üòâ',
                                       parse_mode='HTML', reply_markup=InlineKeyboardMarkup(
                                           [
                                               [InlineKeyboardButton(
                                                   '–ü–æ—á–∞—Ç–∏ –≤–ø—Ä–∞–≤–∏', callback_data='start')],
                                               [InlineKeyboardButton(
                                                   '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data='back')]
                                           ]
                                       ))
        return START_STATIVE_DYNAMIC_VERBS
    elif action == 'back':
        await context.bot.send_message(chat_id=update.callback_query.message.chat_id,
                                       text=f'<b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>\n\n'
                                            f'–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –∑ –≤–∏–≤—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö –¥—ñ—î—Å–ª—ñ–≤.\n\n'
                                            f'–û–±–∏—Ä–∞–π, —â–æ —Ö–æ—á–µ—à –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–≤–∞—Ç–∏: ',
                                       parse_mode='HTML', reply_markup=InlineKeyboardMarkup(main_menu_keyboard))
        return TASK_PICK


async def stative_dynamic_verbs_practice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print('stative_dynamic_verbs_practice')
    text: str = update.message.text.lower().strip().replace(", ", ",")
    target = json.loads(context.user_data['target_stative_dynamic_task'])

    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton('–ù–µ –∑–Ω–∞—é', callback_data='dont_know')],
        [InlineKeyboardButton('–ó–∞–∫—ñ–Ω—á–∏—Ç–∏', callback_data='to_main_menu')]
    ])

    if text == target["user_answer"]:

        stative_dynamic_to_pick = list(
            filter(lambda v: v['task'] != target['task'], stative_dynamic_verbs))
        target_stative_dynamic = random.choice(stative_dynamic_to_pick)
        context.user_data['target_stative_dynamic_task'] = json.dumps(
            target_stative_dynamic)

        await update.message.reply_text(f'‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n'
                                        f'{target["full_answer"]}\n\n'
                                        f'<b>–ù–∞—Å—Ç—É–ø–Ω–µ —Ä–µ—á–µ–Ω–Ω—è:</b>\n'
                                        f'{target_stative_dynamic["translation"]}\n\n'
                                        f'<b>{target_stative_dynamic["task"]} </b>\n\n',
                                        parse_mode='HTML',
                                        reply_markup=reply_markup)
    else:
        await update.message.reply_text(f'‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑',
                                        parse_mode='HTML',
                                        reply_markup=reply_markup)

    return STATIVE_DYNAMIC_VERBS


async def stative_dynamic_verbs_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action = query.data

    if action == 'dont_know':
        old_target = json.loads(
            context.user_data['target_stative_dynamic_task'])
        stative_dynamic_to_pick = list(
            filter(lambda v: v['task'] != old_target['task'], stative_dynamic_verbs))
        target_stative_dynamic = random.choice(stative_dynamic_to_pick)
        context.user_data['target_stative_dynamic_task'] = json.dumps(
            target_stative_dynamic)

        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton('–ù–µ –∑–Ω–∞—é', callback_data='dont_know')],
            [InlineKeyboardButton('–ó–∞–∫—ñ–Ω—á–∏—Ç–∏', callback_data='to_main_menu')]
        ])

        await context.bot.send_message(chat_id=update.callback_query.message.chat_id,
                                       text=f'üëå –ù—ñ—á–æ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ!\n\n'
                                       f'–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: <em>{old_target["user_answer"]}</em>\n\n'
                                       f'<b>{old_target["full_answer"]}</b>\n\n'
                                       f'<em>{old_target["explanation"]}</em>\n\n\n'
                                       f'<b>–ù–∞—Å—Ç—É–ø–Ω–µ —Ä–µ—á–µ–Ω–Ω—è:</b>\n'
                                       f'{target_stative_dynamic["translation"]}\n\n'
                                       f'<b>{target_stative_dynamic["task"]} </b>\n\n',
                                       parse_mode='HTML',
                                       reply_markup=reply_markup)

        return STATIVE_DYNAMIC_VERBS
    elif action == 'to_main_menu':
        await context.bot.send_message(chat_id=update.callback_query.message.chat_id,
                                       text=f'<b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>\n\n'
                                            f'–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –∑ –≤–∏–≤—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö –¥—ñ—î—Å–ª—ñ–≤.\n\n'
                                            f'–û–±–∏—Ä–∞–π, —â–æ —Ö–æ—á–µ—à –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–≤–∞—Ç–∏: ',
                                       parse_mode='HTML', reply_markup=InlineKeyboardMarkup(main_menu_keyboard))
        return TASK_PICK


async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f'Update {update} caused error {context.error}')


if __name__ == '__main__':
    print('Starting Bot')
    app = Application.builder().token(TOKEN).build()

    app.add_handler(ConversationHandler(
        entry_points=[CommandHandler('start', start_command)],
        states={
            TASK_PICK: [CallbackQueryHandler(task_picker)],
            START_IRREGULAR_VERBS: [CallbackQueryHandler(start_irregular_verbs)],
            IRREGULAR_VERBS: [MessageHandler(filters.TEXT & ~filters.COMMAND, irregular_verbs_command)],
            START_IRREGULAR_VERBS_PRACTICE: [CallbackQueryHandler(start_irregular_verbs_practice)],
            IRREGULAR_VERBS_PRACTICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, irregular_verbs_practice),
                                       CallbackQueryHandler(irregular_verbs_practice_callback)],
            START_TRANSLATE_UA_EN: [CallbackQueryHandler(start_verbs_translate_command)],
            TRANSLATE_UA_EN: [MessageHandler(filters.TEXT & ~filters.COMMAND, verb_translate),
                              CallbackQueryHandler(verb_translate_callback)],

            START_PHRASAL_VERBS: [CallbackQueryHandler(start_phrasal_verbs)],
            PHRASAL_VERBS_CATEGORY: [CallbackQueryHandler(phrasal_verbs_category)],
            PHRASAL_VERBS: [MessageHandler(filters.TEXT & ~filters.COMMAND, phrasal_verb),
                            CallbackQueryHandler(phrasal_verbs_callback)],

            START_STATIVE_DYNAMIC_VERBS: [CallbackQueryHandler(start_stative_dynamic_verbs)],
            STATIVE_DYNAMIC_VERBS: [MessageHandler(filters.TEXT & ~filters.COMMAND, stative_dynamic_verbs_practice),
                                    CallbackQueryHandler(stative_dynamic_verbs_callback)],
        },
        fallbacks=[CallbackQueryHandler(to_main_menu)]
    ))

    app.add_handler(CallbackQueryHandler(unknown_message_callback_handler))

    app.add_error_handler(error)

    print('Polling...')
    app.run_polling(poll_interval=1)
